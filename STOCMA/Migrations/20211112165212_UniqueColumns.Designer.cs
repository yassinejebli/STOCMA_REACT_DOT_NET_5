// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using STOCMA.Data;

namespace STOCMA.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211112165212_UniqueColumns")]
    partial class UniqueColumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("STOCMA.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("STOCMA.Models.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarCode")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("IdCategorie")
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsBarCodePrintable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Logo2")
                        .HasColumnType("text");

                    b.Property<string>("Logo3")
                        .HasColumnType("text");

                    b.Property<string>("Marque")
                        .HasColumnType("text");

                    b.Property<float?>("MaxStock")
                        .HasColumnType("real");

                    b.Property<float?>("MinStock")
                        .HasColumnType("real");

                    b.Property<float>("PA")
                        .HasColumnType("real");

                    b.Property<float?>("PVD")
                        .HasColumnType("real");

                    b.Property<float?>("PVG")
                        .HasColumnType("real");

                    b.Property<float?>("PVSG")
                        .HasColumnType("real");

                    b.Property<float?>("QteEmballagePleine")
                        .HasColumnType("real");

                    b.Property<float?>("QteEmballageVide")
                        .HasColumnType("real");

                    b.Property<float>("QteStock")
                        .HasColumnType("real");

                    b.Property<string>("Ref")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("RefAuto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float?>("TVA")
                        .HasColumnType("real");

                    b.Property<string>("Unite")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Designation")
                        .IsUnique();

                    b.HasIndex("IdCategorie");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("STOCMA.Models.ArticleFacture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BarCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IdFamille")
                        .HasColumnType("uuid");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Logo2")
                        .HasColumnType("text");

                    b.Property<string>("Logo3")
                        .HasColumnType("text");

                    b.Property<string>("Marque")
                        .HasColumnType("text");

                    b.Property<float?>("MaxStock")
                        .HasColumnType("real");

                    b.Property<float?>("MinStock")
                        .HasColumnType("real");

                    b.Property<float>("PA")
                        .HasColumnType("real");

                    b.Property<float?>("PVD")
                        .HasColumnType("real");

                    b.Property<float?>("PVG")
                        .HasColumnType("real");

                    b.Property<float?>("PVSG")
                        .HasColumnType("real");

                    b.Property<float>("QteStock")
                        .HasColumnType("real");

                    b.Property<string>("Ref")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<float?>("TVA")
                        .HasColumnType("real");

                    b.Property<string>("Unite")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Designation")
                        .IsUnique();

                    b.ToTable("ArticleFactures");
                });

            modelBuilder.Entity("STOCMA.Models.ArticleSite", b =>
                {
                    b.Property<int>("IdSite")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<float>("QteStock")
                        .HasColumnType("real");

                    b.HasKey("IdSite", "IdArticle");

                    b.HasIndex("IdArticle");

                    b.ToTable("ArticleSites");
                });

            modelBuilder.Entity("STOCMA.Models.BonAvoir", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("IdBonReception")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdFournisseur")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdSite")
                        .HasColumnType("integer");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdBonReception");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdSite");

                    b.ToTable("BonAvoirs");
                });

            modelBuilder.Entity("STOCMA.Models.BonAvoirC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("IdBonLivraison")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdSite")
                        .HasColumnType("integer");

                    b.Property<float?>("Marge")
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdBonLivraison");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdSite");

                    b.ToTable("BonAvoirCs");
                });

            modelBuilder.Entity("STOCMA.Models.BonAvoirCItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Casse")
                        .HasColumnType("boolean");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdBonAvoirC")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdSite")
                        .HasColumnType("integer");

                    b.Property<string>("NumBL")
                        .HasColumnType("text");

                    b.Property<float>("PA")
                        .HasColumnType("real");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdBonAvoirC");

                    b.HasIndex("IdSite");

                    b.ToTable("BonAvoirCItems");
                });

            modelBuilder.Entity("STOCMA.Models.BonAvoirItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdBonAvoir")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdSite")
                        .HasColumnType("integer");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdBonAvoir");

                    b.HasIndex("IdSite");

                    b.ToTable("BonAvoirItems");
                });

            modelBuilder.Entity("STOCMA.Models.BonCommande", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdFournisseur")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdFournisseur");

                    b.ToTable("BonCommandes");
                });

            modelBuilder.Entity("STOCMA.Models.BonCommandeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdBonCommande")
                        .HasColumnType("uuid");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdBonCommande");

                    b.ToTable("BonCommandeItems");
                });

            modelBuilder.Entity("STOCMA.Models.BonLivraison", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdFacture")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdSite")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IdTypePaiement")
                        .HasColumnType("uuid");

                    b.Property<string>("IdUser")
                        .HasColumnType("text");

                    b.Property<float?>("Marge")
                        .HasColumnType("real");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<float?>("OldSolde")
                        .HasColumnType("real");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("TypeReglement")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.Property<bool>("WithDiscount")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdFacture");

                    b.HasIndex("IdSite");

                    b.HasIndex("IdTypePaiement");

                    b.ToTable("BonLivraisons");
                });

            modelBuilder.Entity("STOCMA.Models.BonLivraisonItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdBonLivraison")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdSite")
                        .HasColumnType("integer");

                    b.Property<int?>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("NumBC")
                        .HasColumnType("text");

                    b.Property<float>("PA")
                        .HasColumnType("real");

                    b.Property<bool>("PercentageDiscount")
                        .HasColumnType("boolean");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdBonLivraison");

                    b.HasIndex("IdSite");

                    b.ToTable("BonLivraisonItems");
                });

            modelBuilder.Entity("STOCMA.Models.BonReception", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("IdFactureF")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdFournisseur")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdSite")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NumBon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdFactureF");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdSite");

                    b.ToTable("BonReceptions");
                });

            modelBuilder.Entity("STOCMA.Models.BonReceptionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdBonReception")
                        .HasColumnType("uuid");

                    b.Property<int?>("Index")
                        .HasColumnType("integer");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.Property<float?>("TotalTTC")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdBonReception");

                    b.ToTable("BonReceptionItems");
                });

            modelBuilder.Entity("STOCMA.Models.Categorie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdFamille")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdFamille");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("STOCMA.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Adresse")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CodeClient")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<string>("ICE")
                        .HasColumnType("text");

                    b.Property<Guid?>("IdRevendeur")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsClientDivers")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<float>("Plafond")
                        .HasColumnType("real");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdRevendeur");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("STOCMA.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Adresse")
                        .HasColumnType("text");

                    b.Property<string>("AdresseSociete1")
                        .HasColumnType("text");

                    b.Property<string>("AdresseSociete2")
                        .HasColumnType("text");

                    b.Property<string>("AdresseSociete3")
                        .HasColumnType("text");

                    b.Property<string>("AdresseSociete4")
                        .HasColumnType("text");

                    b.Property<string>("CodeSecurite")
                        .HasColumnType("text");

                    b.Property<string>("CompleteName")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<string>("Footer")
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Partner")
                        .HasColumnType("text");

                    b.Property<string>("QrCode")
                        .HasColumnType("text");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<bool>("UseVAT")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("STOCMA.Models.Depence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdTypeDepence")
                        .HasColumnType("uuid");

                    b.Property<float>("Montant")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdTypeDepence");

                    b.ToTable("Depences");
                });

            modelBuilder.Entity("STOCMA.Models.Depense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Titre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Depenses");
                });

            modelBuilder.Entity("STOCMA.Models.DepenseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdDepense")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTypeDepense")
                        .HasColumnType("uuid");

                    b.Property<float>("Montant")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdDepense");

                    b.HasIndex("IdTypeDepense");

                    b.ToTable("DepenseItems");
                });

            modelBuilder.Entity("STOCMA.Models.Devis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DelaiLivrasion")
                        .HasColumnType("text");

                    b.Property<int>("DeliveryTime")
                        .HasColumnType("integer");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdSite")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IdTypePaiement")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<bool>("PercentageDiscount")
                        .HasColumnType("boolean");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("TransportExpedition")
                        .HasColumnType("text");

                    b.Property<bool>("TransportFees")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeReglement")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.Property<string>("ValiditeOffre")
                        .HasColumnType("text");

                    b.Property<int>("Validity")
                        .HasColumnType("integer");

                    b.Property<bool>("WithDiscount")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdSite");

                    b.HasIndex("IdTypePaiement");

                    b.ToTable("Devises");
                });

            modelBuilder.Entity("STOCMA.Models.DevisItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdDevis")
                        .HasColumnType("uuid");

                    b.Property<bool>("PercentageDiscount")
                        .HasColumnType("boolean");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdDevis");

                    b.ToTable("DevisItems");
                });

            modelBuilder.Entity("STOCMA.Models.Dgb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Banque")
                        .HasColumnType("text");

                    b.Property<string>("CinRcn")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DatePaiement")
                        .HasColumnType("text");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<string>("ModeConsignation")
                        .HasColumnType("text");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<string>("NumCheque")
                        .HasColumnType("text");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("TypeReglement")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.ToTable("Dgbs");
                });

            modelBuilder.Entity("STOCMA.Models.DgbF", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Banque")
                        .HasColumnType("text");

                    b.Property<string>("CinRcn")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DatePaiement")
                        .HasColumnType("text");

                    b.Property<Guid>("IdFournisseur")
                        .HasColumnType("uuid");

                    b.Property<string>("ModeConsignation")
                        .HasColumnType("text");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<string>("NumCheque")
                        .HasColumnType("text");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("TypeReglement")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdFournisseur");

                    b.ToTable("DgbFs");
                });

            modelBuilder.Entity("STOCMA.Models.DgbFItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdDgbF")
                        .HasColumnType("uuid");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdDgbF");

                    b.ToTable("DgbFItems");
                });

            modelBuilder.Entity("STOCMA.Models.DgbItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdDgb")
                        .HasColumnType("uuid");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdDgb");

                    b.ToTable("DgbItems");
                });

            modelBuilder.Entity("STOCMA.Models.Facture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientICE")
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("IdBonLivraison")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdSite")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IdTypePaiement")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("TypeReglement")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.Property<bool>("WithDiscount")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdBonLivraison");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdSite");

                    b.HasIndex("IdTypePaiement");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("STOCMA.Models.FactureF", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdFournisseur")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdTypePaiement")
                        .HasColumnType("uuid");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<int?>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("TypeReglement")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdTypePaiement");

                    b.ToTable("FactureFs");
                });

            modelBuilder.Entity("STOCMA.Models.FactureFItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdFactureF")
                        .HasColumnType("uuid");

                    b.Property<string>("NumBR")
                        .HasColumnType("text");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdFactureF");

                    b.ToTable("FactureFItems");
                });

            modelBuilder.Entity("STOCMA.Models.FactureItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdFacture")
                        .HasColumnType("uuid");

                    b.Property<string>("NumBC")
                        .HasColumnType("text");

                    b.Property<string>("NumBL")
                        .HasColumnType("text");

                    b.Property<bool>("PercentageDiscount")
                        .HasColumnType("boolean");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdFacture");

                    b.ToTable("FactureItems");
                });

            modelBuilder.Entity("STOCMA.Models.FakeFacture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientICE")
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdTypePaiement")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.Property<bool>("WithDiscount")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdTypePaiement");

                    b.ToTable("FakeFactures");
                });

            modelBuilder.Entity("STOCMA.Models.FakeFactureF", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdFournisseur")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdTypePaiement")
                        .HasColumnType("uuid");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<int?>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("TypeReglement")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdTypePaiement");

                    b.ToTable("FakeFacturesF");
                });

            modelBuilder.Entity("STOCMA.Models.FakeFactureFItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticleFacture")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdFakeFactureF")
                        .HasColumnType("uuid");

                    b.Property<string>("NumBR")
                        .HasColumnType("text");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticleFacture");

                    b.HasIndex("IdFakeFactureF");

                    b.ToTable("FakeFactureFItems");
                });

            modelBuilder.Entity("STOCMA.Models.FakeFactureItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid>("IdArticleFacture")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdFakeFacture")
                        .HasColumnType("uuid");

                    b.Property<bool>("PercentageDiscount")
                        .HasColumnType("boolean");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.Property<float>("TotalHT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticleFacture");

                    b.HasIndex("IdFakeFacture");

                    b.ToTable("FakeFactureItems");
                });

            modelBuilder.Entity("STOCMA.Models.Famille", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Familles");
                });

            modelBuilder.Entity("STOCMA.Models.Fournisseur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Adresse")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<string>("ICE")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Fournisseurs");
                });

            modelBuilder.Entity("STOCMA.Models.Inventaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdSite")
                        .HasColumnType("integer");

                    b.Property<string>("Titre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdSite");

                    b.ToTable("Inventaires");
                });

            modelBuilder.Entity("STOCMA.Models.InventaireItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdCategory")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdInvetaire")
                        .HasColumnType("uuid");

                    b.Property<float>("QteStock")
                        .HasColumnType("real");

                    b.Property<float>("QteStockReel")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdInvetaire");

                    b.ToTable("InventaireItems");
                });

            modelBuilder.Entity("STOCMA.Models.JournalConnexion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JournalConnexions");
                });

            modelBuilder.Entity("STOCMA.Models.Paiement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Credit")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Debit")
                        .HasColumnType("real");

                    b.Property<bool?>("EnCaisse")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Hide")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IdBonAvoirC")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdBonLivraison")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdFacture")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTypePaiement")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdBonAvoirC");

                    b.HasIndex("IdBonLivraison");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdFacture");

                    b.HasIndex("IdTypePaiement");

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("STOCMA.Models.PaiementF", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<float>("Credit")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Debit")
                        .HasColumnType("real");

                    b.Property<bool?>("EnCaisse")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IdBonAvoir")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdBonReception")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdFactureF")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdFournisseur")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTypePaiement")
                        .HasColumnType("uuid");

                    b.Property<bool?>("MonCheque")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdBonAvoir");

                    b.HasIndex("IdBonReception");

                    b.HasIndex("IdFactureF");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdTypePaiement");

                    b.ToTable("PaiementFs");
                });

            modelBuilder.Entity("STOCMA.Models.PaiementFacture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<float>("Credit")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Debit")
                        .HasColumnType("real");

                    b.Property<bool?>("EnCaisse")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Hide")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IdBonAvoirC")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdFacture")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTypePaiement")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdBonAvoirC");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdFacture");

                    b.HasIndex("IdTypePaiement");

                    b.ToTable("PaiementFactures");
                });

            modelBuilder.Entity("STOCMA.Models.PaiementFactureF", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<float>("Credit")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Debit")
                        .HasColumnType("real");

                    b.Property<bool?>("EnCaisse")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Hide")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IdBonAvoir")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdFactureF")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdFournisseur")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTypePaiement")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("MonCheque")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdBonAvoir");

                    b.HasIndex("IdFactureF");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdTypePaiement");

                    b.ToTable("PaiementFactureFs");
                });

            modelBuilder.Entity("STOCMA.Models.Rdb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.ToTable("Rdbs");
                });

            modelBuilder.Entity("STOCMA.Models.RdbF", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdFournisseur")
                        .HasColumnType("uuid");

                    b.Property<string>("NumBon")
                        .HasColumnType("text");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdFournisseur");

                    b.ToTable("RdbFs");
                });

            modelBuilder.Entity("STOCMA.Models.RdbFItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRdbF")
                        .HasColumnType("uuid");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdRdbF");

                    b.ToTable("RdbFItems");
                });

            modelBuilder.Entity("STOCMA.Models.RdbItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRdb")
                        .HasColumnType("uuid");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdRdb");

                    b.ToTable("RdbItems");
                });

            modelBuilder.Entity("STOCMA.Models.Revendeur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Revendeurs");
                });

            modelBuilder.Entity("STOCMA.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Afficher")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("STOCMA.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("STOCMA.Models.StockMouvement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdSiteFrom")
                        .HasColumnType("integer");

                    b.Property<int>("IdSiteTo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdSiteFrom");

                    b.HasIndex("IdSiteTo");

                    b.ToTable("StockMouvements");
                });

            modelBuilder.Entity("STOCMA.Models.StockMouvementItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdStockMouvement")
                        .HasColumnType("uuid");

                    b.Property<float>("Qte")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdStockMouvement");

                    b.ToTable("StockMouvementItems");
                });

            modelBuilder.Entity("STOCMA.Models.Tarif", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Ref")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Tarifs");
                });

            modelBuilder.Entity("STOCMA.Models.TarifItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdArticle")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTarif")
                        .HasColumnType("uuid");

                    b.Property<float>("Pu")
                        .HasColumnType("real");

                    b.Property<float>("Pu2")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdTarif");

                    b.ToTable("TarifItems");
                });

            modelBuilder.Entity("STOCMA.Models.TypeDepence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeDepences");
                });

            modelBuilder.Entity("STOCMA.Models.TypeDepense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeDepenses");
                });

            modelBuilder.Entity("STOCMA.Models.TypePaiement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsAchat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAncien")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvoir")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBankRelated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEspece")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImpaye")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemboursement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemise")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVente")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypePaiements");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("STOCMA.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("STOCMA.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("STOCMA.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STOCMA.Models.Article", b =>
                {
                    b.HasOne("STOCMA.Models.Categorie", "Categorie")
                        .WithMany("Articles")
                        .HasForeignKey("IdCategorie");

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("STOCMA.Models.ArticleSite", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("ArticleSites")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("ArticleSites")
                        .HasForeignKey("IdSite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("STOCMA.Models.BonAvoir", b =>
                {
                    b.HasOne("STOCMA.Models.BonReception", "BonReception")
                        .WithMany("BonAvoirs")
                        .HasForeignKey("IdBonReception");

                    b.HasOne("STOCMA.Models.Fournisseur", "Fournisseur")
                        .WithMany("BonAvoirs")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("BonAvoirs")
                        .HasForeignKey("IdSite");

                    b.Navigation("BonReception");

                    b.Navigation("Fournisseur");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("STOCMA.Models.BonAvoirC", b =>
                {
                    b.HasOne("STOCMA.Models.BonLivraison", "BonLivraison")
                        .WithMany("BonAvoirCs")
                        .HasForeignKey("IdBonLivraison");

                    b.HasOne("STOCMA.Models.Client", "Client")
                        .WithMany("BonAvoirCs")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("BonAvoirCs")
                        .HasForeignKey("IdSite");

                    b.Navigation("BonLivraison");

                    b.Navigation("Client");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("STOCMA.Models.BonAvoirCItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("BonAvoirCItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.BonAvoirC", "BonAvoirC")
                        .WithMany("BonAvoirCItems")
                        .HasForeignKey("IdBonAvoirC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("BonAvoirCItems")
                        .HasForeignKey("IdSite")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Article");

                    b.Navigation("BonAvoirC");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("STOCMA.Models.BonAvoirItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("BonAvoirItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.BonAvoir", "BonAvoir")
                        .WithMany("BonAvoirItems")
                        .HasForeignKey("IdBonAvoir")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("BonAvoirItems")
                        .HasForeignKey("IdSite")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Article");

                    b.Navigation("BonAvoir");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("STOCMA.Models.BonCommande", b =>
                {
                    b.HasOne("STOCMA.Models.Fournisseur", "Fournisseur")
                        .WithMany("BonCommandes")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("STOCMA.Models.BonCommandeItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("BonCommandeItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.BonCommande", "BonCommande")
                        .WithMany("BonCommandeItems")
                        .HasForeignKey("IdBonCommande")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("BonCommande");
                });

            modelBuilder.Entity("STOCMA.Models.BonLivraison", b =>
                {
                    b.HasOne("STOCMA.Models.Client", "Client")
                        .WithMany("BonLivraisons")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Facture", "Facture")
                        .WithMany("BonLivraisons")
                        .HasForeignKey("IdFacture");

                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("BonLivraisons")
                        .HasForeignKey("IdSite");

                    b.HasOne("STOCMA.Models.TypePaiement", "TypePaiement")
                        .WithMany("BonLivraisons")
                        .HasForeignKey("IdTypePaiement");

                    b.Navigation("Client");

                    b.Navigation("Facture");

                    b.Navigation("Site");

                    b.Navigation("TypePaiement");
                });

            modelBuilder.Entity("STOCMA.Models.BonLivraisonItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("BonLivraisonItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.BonLivraison", "BonLivraison")
                        .WithMany("BonLivraisonItems")
                        .HasForeignKey("IdBonLivraison")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("BonLivraisonItems")
                        .HasForeignKey("IdSite")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Article");

                    b.Navigation("BonLivraison");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("STOCMA.Models.BonReception", b =>
                {
                    b.HasOne("STOCMA.Models.FactureF", "FactureF")
                        .WithMany("BonReceptions")
                        .HasForeignKey("IdFactureF");

                    b.HasOne("STOCMA.Models.Fournisseur", "Fournisseur")
                        .WithMany("BonReceptions")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("BonReceptions")
                        .HasForeignKey("IdSite");

                    b.Navigation("FactureF");

                    b.Navigation("Fournisseur");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("STOCMA.Models.BonReceptionItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("BonReceptionItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.BonReception", "BonReception")
                        .WithMany("BonReceptionItems")
                        .HasForeignKey("IdBonReception")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("BonReception");
                });

            modelBuilder.Entity("STOCMA.Models.Categorie", b =>
                {
                    b.HasOne("STOCMA.Models.Famille", "Famille")
                        .WithMany("Categories")
                        .HasForeignKey("IdFamille");

                    b.Navigation("Famille");
                });

            modelBuilder.Entity("STOCMA.Models.Client", b =>
                {
                    b.HasOne("STOCMA.Models.Revendeur", "Revendeur")
                        .WithMany("Clients")
                        .HasForeignKey("IdRevendeur");

                    b.Navigation("Revendeur");
                });

            modelBuilder.Entity("STOCMA.Models.Depence", b =>
                {
                    b.HasOne("STOCMA.Models.TypeDepence", "TypeDepence")
                        .WithMany("Depences")
                        .HasForeignKey("IdTypeDepence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeDepence");
                });

            modelBuilder.Entity("STOCMA.Models.DepenseItem", b =>
                {
                    b.HasOne("STOCMA.Models.Depense", "Depense")
                        .WithMany("DepenseItems")
                        .HasForeignKey("IdDepense")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.TypeDepense", "TypeDepense")
                        .WithMany("DepenseItems")
                        .HasForeignKey("IdTypeDepense")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Depense");

                    b.Navigation("TypeDepense");
                });

            modelBuilder.Entity("STOCMA.Models.Devis", b =>
                {
                    b.HasOne("STOCMA.Models.Client", "Client")
                        .WithMany("Devises")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("Devises")
                        .HasForeignKey("IdSite");

                    b.HasOne("STOCMA.Models.TypePaiement", "TypePaiement")
                        .WithMany("Devises")
                        .HasForeignKey("IdTypePaiement");

                    b.Navigation("Client");

                    b.Navigation("Site");

                    b.Navigation("TypePaiement");
                });

            modelBuilder.Entity("STOCMA.Models.DevisItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("DevisItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Devis", "Devis")
                        .WithMany("DevisItems")
                        .HasForeignKey("IdDevis")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Devis");
                });

            modelBuilder.Entity("STOCMA.Models.Dgb", b =>
                {
                    b.HasOne("STOCMA.Models.Client", "Client")
                        .WithMany("Dgbs")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("STOCMA.Models.DgbF", b =>
                {
                    b.HasOne("STOCMA.Models.Fournisseur", "Fournisseur")
                        .WithMany("DgbFs")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("STOCMA.Models.DgbFItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("DgbFItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.DgbF", "DgbF")
                        .WithMany("DgbFItems")
                        .HasForeignKey("IdDgbF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("DgbF");
                });

            modelBuilder.Entity("STOCMA.Models.DgbItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("DgbItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Dgb", "Dgb")
                        .WithMany("DgbItems")
                        .HasForeignKey("IdDgb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Dgb");
                });

            modelBuilder.Entity("STOCMA.Models.Facture", b =>
                {
                    b.HasOne("STOCMA.Models.BonLivraison", "BonLivraison")
                        .WithMany("Factures")
                        .HasForeignKey("IdBonLivraison");

                    b.HasOne("STOCMA.Models.Client", "Client")
                        .WithMany("Factures")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("Factures")
                        .HasForeignKey("IdSite");

                    b.HasOne("STOCMA.Models.TypePaiement", "TypePaiement")
                        .WithMany("Factures")
                        .HasForeignKey("IdTypePaiement");

                    b.Navigation("BonLivraison");

                    b.Navigation("Client");

                    b.Navigation("Site");

                    b.Navigation("TypePaiement");
                });

            modelBuilder.Entity("STOCMA.Models.FactureF", b =>
                {
                    b.HasOne("STOCMA.Models.Fournisseur", "Fournisseur")
                        .WithMany("FactureFs")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.TypePaiement", "TypePaiement")
                        .WithMany("FactureFs")
                        .HasForeignKey("IdTypePaiement");

                    b.Navigation("Fournisseur");

                    b.Navigation("TypePaiement");
                });

            modelBuilder.Entity("STOCMA.Models.FactureFItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("FactureFItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.FactureF", "FactureF")
                        .WithMany("FactureFItems")
                        .HasForeignKey("IdFactureF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("FactureF");
                });

            modelBuilder.Entity("STOCMA.Models.FactureItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("FactureItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Facture", "Facture")
                        .WithMany("FactureItems")
                        .HasForeignKey("IdFacture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Facture");
                });

            modelBuilder.Entity("STOCMA.Models.FakeFacture", b =>
                {
                    b.HasOne("STOCMA.Models.Client", "Client")
                        .WithMany("FakeFactures")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.TypePaiement", "TypePaiement")
                        .WithMany("FakeFactures")
                        .HasForeignKey("IdTypePaiement");

                    b.Navigation("Client");

                    b.Navigation("TypePaiement");
                });

            modelBuilder.Entity("STOCMA.Models.FakeFactureF", b =>
                {
                    b.HasOne("STOCMA.Models.Fournisseur", "Fournisseur")
                        .WithMany("FakeFactureFs")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.TypePaiement", "TypePaiement")
                        .WithMany("FakeFactureFs")
                        .HasForeignKey("IdTypePaiement");

                    b.Navigation("Fournisseur");

                    b.Navigation("TypePaiement");
                });

            modelBuilder.Entity("STOCMA.Models.FakeFactureFItem", b =>
                {
                    b.HasOne("STOCMA.Models.ArticleFacture", "ArticleFacture")
                        .WithMany("FakeFactureFItems")
                        .HasForeignKey("IdArticleFacture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.FakeFactureF", "FakeFactureF")
                        .WithMany("FakeFactureFItems")
                        .HasForeignKey("IdFakeFactureF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleFacture");

                    b.Navigation("FakeFactureF");
                });

            modelBuilder.Entity("STOCMA.Models.FakeFactureItem", b =>
                {
                    b.HasOne("STOCMA.Models.ArticleFacture", "ArticleFacture")
                        .WithMany("FakeFactureItems")
                        .HasForeignKey("IdArticleFacture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.FakeFacture", "FakeFacture")
                        .WithMany("FakeFactureItems")
                        .HasForeignKey("IdFakeFacture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleFacture");

                    b.Navigation("FakeFacture");
                });

            modelBuilder.Entity("STOCMA.Models.Inventaire", b =>
                {
                    b.HasOne("STOCMA.Models.Site", "Site")
                        .WithMany("Inventaires")
                        .HasForeignKey("IdSite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("STOCMA.Models.InventaireItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("InventaireItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Categorie", "Categorie")
                        .WithMany("InventaireItems")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Inventaire", "Inventaire")
                        .WithMany("InventaireItems")
                        .HasForeignKey("IdInvetaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Categorie");

                    b.Navigation("Inventaire");
                });

            modelBuilder.Entity("STOCMA.Models.Paiement", b =>
                {
                    b.HasOne("STOCMA.Models.BonAvoirC", "BonAvoirC")
                        .WithMany("Paiements")
                        .HasForeignKey("IdBonAvoirC");

                    b.HasOne("STOCMA.Models.BonLivraison", "BonLivraison")
                        .WithMany("Paiements")
                        .HasForeignKey("IdBonLivraison");

                    b.HasOne("STOCMA.Models.Client", "Client")
                        .WithMany("Paiements")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Facture", "Facture")
                        .WithMany("Paiements")
                        .HasForeignKey("IdFacture");

                    b.HasOne("STOCMA.Models.TypePaiement", "TypePaiement")
                        .WithMany("Paiements")
                        .HasForeignKey("IdTypePaiement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonAvoirC");

                    b.Navigation("BonLivraison");

                    b.Navigation("Client");

                    b.Navigation("Facture");

                    b.Navigation("TypePaiement");
                });

            modelBuilder.Entity("STOCMA.Models.PaiementF", b =>
                {
                    b.HasOne("STOCMA.Models.BonAvoir", "BonAvoir")
                        .WithMany("PaiementFs")
                        .HasForeignKey("IdBonAvoir");

                    b.HasOne("STOCMA.Models.BonReception", "BonReception")
                        .WithMany("PaiementFs")
                        .HasForeignKey("IdBonReception");

                    b.HasOne("STOCMA.Models.FactureF", "FactureF")
                        .WithMany("PaiementFs")
                        .HasForeignKey("IdFactureF");

                    b.HasOne("STOCMA.Models.Fournisseur", "Fournisseur")
                        .WithMany("PaiementFs")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.TypePaiement", "TypePaiement")
                        .WithMany("PaiementFs")
                        .HasForeignKey("IdTypePaiement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonAvoir");

                    b.Navigation("BonReception");

                    b.Navigation("FactureF");

                    b.Navigation("Fournisseur");

                    b.Navigation("TypePaiement");
                });

            modelBuilder.Entity("STOCMA.Models.PaiementFacture", b =>
                {
                    b.HasOne("STOCMA.Models.BonAvoirC", "BonAvoirC")
                        .WithMany("PaiementFactures")
                        .HasForeignKey("IdBonAvoirC");

                    b.HasOne("STOCMA.Models.Client", "Client")
                        .WithMany("PaiementFactures")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Facture", "Facture")
                        .WithMany("PaiementFactures")
                        .HasForeignKey("IdFacture");

                    b.HasOne("STOCMA.Models.TypePaiement", "TypePaiement")
                        .WithMany("PaiementFactures")
                        .HasForeignKey("IdTypePaiement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonAvoirC");

                    b.Navigation("Client");

                    b.Navigation("Facture");

                    b.Navigation("TypePaiement");
                });

            modelBuilder.Entity("STOCMA.Models.PaiementFactureF", b =>
                {
                    b.HasOne("STOCMA.Models.BonAvoir", "BonAvoir")
                        .WithMany("PaiementFactureFs")
                        .HasForeignKey("IdBonAvoir");

                    b.HasOne("STOCMA.Models.FactureF", "FactureF")
                        .WithMany("PaiementFactureFs")
                        .HasForeignKey("IdFactureF");

                    b.HasOne("STOCMA.Models.Fournisseur", "Fournisseur")
                        .WithMany("PaiementFactureFs")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.TypePaiement", "TypePaiement")
                        .WithMany("PaiementFactureFs")
                        .HasForeignKey("IdTypePaiement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonAvoir");

                    b.Navigation("FactureF");

                    b.Navigation("Fournisseur");

                    b.Navigation("TypePaiement");
                });

            modelBuilder.Entity("STOCMA.Models.Rdb", b =>
                {
                    b.HasOne("STOCMA.Models.Client", "Client")
                        .WithMany("Rdbs")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("STOCMA.Models.RdbF", b =>
                {
                    b.HasOne("STOCMA.Models.Fournisseur", "Fournisseur")
                        .WithMany("RdbFs")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("STOCMA.Models.RdbFItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("RdbFItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.RdbF", "RdbF")
                        .WithMany("RdbFItems")
                        .HasForeignKey("IdRdbF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("RdbF");
                });

            modelBuilder.Entity("STOCMA.Models.RdbItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("RdbItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Rdb", "Rdb")
                        .WithMany("RdbItems")
                        .HasForeignKey("IdRdb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Rdb");
                });

            modelBuilder.Entity("STOCMA.Models.StockMouvement", b =>
                {
                    b.HasOne("STOCMA.Models.Site", "SiteFrom")
                        .WithMany("StockMouvementFroms")
                        .HasForeignKey("IdSiteFrom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Site", "SiteTo")
                        .WithMany("StockMouvementTos")
                        .HasForeignKey("IdSiteTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SiteFrom");

                    b.Navigation("SiteTo");
                });

            modelBuilder.Entity("STOCMA.Models.StockMouvementItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("StockMouvementItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.StockMouvement", "StockMouvement")
                        .WithMany("StockMouvementItems")
                        .HasForeignKey("IdStockMouvement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("StockMouvement");
                });

            modelBuilder.Entity("STOCMA.Models.TarifItem", b =>
                {
                    b.HasOne("STOCMA.Models.Article", "Article")
                        .WithMany("TarifItems")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STOCMA.Models.Tarif", "Tarif")
                        .WithMany("TarifItems")
                        .HasForeignKey("IdTarif")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tarif");
                });

            modelBuilder.Entity("STOCMA.Models.Article", b =>
                {
                    b.Navigation("ArticleSites");

                    b.Navigation("BonAvoirCItems");

                    b.Navigation("BonAvoirItems");

                    b.Navigation("BonCommandeItems");

                    b.Navigation("BonLivraisonItems");

                    b.Navigation("BonReceptionItems");

                    b.Navigation("DevisItems");

                    b.Navigation("DgbFItems");

                    b.Navigation("DgbItems");

                    b.Navigation("FactureFItems");

                    b.Navigation("FactureItems");

                    b.Navigation("InventaireItems");

                    b.Navigation("RdbFItems");

                    b.Navigation("RdbItems");

                    b.Navigation("StockMouvementItems");

                    b.Navigation("TarifItems");
                });

            modelBuilder.Entity("STOCMA.Models.ArticleFacture", b =>
                {
                    b.Navigation("FakeFactureFItems");

                    b.Navigation("FakeFactureItems");
                });

            modelBuilder.Entity("STOCMA.Models.BonAvoir", b =>
                {
                    b.Navigation("BonAvoirItems");

                    b.Navigation("PaiementFactureFs");

                    b.Navigation("PaiementFs");
                });

            modelBuilder.Entity("STOCMA.Models.BonAvoirC", b =>
                {
                    b.Navigation("BonAvoirCItems");

                    b.Navigation("PaiementFactures");

                    b.Navigation("Paiements");
                });

            modelBuilder.Entity("STOCMA.Models.BonCommande", b =>
                {
                    b.Navigation("BonCommandeItems");
                });

            modelBuilder.Entity("STOCMA.Models.BonLivraison", b =>
                {
                    b.Navigation("BonAvoirCs");

                    b.Navigation("BonLivraisonItems");

                    b.Navigation("Factures");

                    b.Navigation("Paiements");
                });

            modelBuilder.Entity("STOCMA.Models.BonReception", b =>
                {
                    b.Navigation("BonAvoirs");

                    b.Navigation("BonReceptionItems");

                    b.Navigation("PaiementFs");
                });

            modelBuilder.Entity("STOCMA.Models.Categorie", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("InventaireItems");
                });

            modelBuilder.Entity("STOCMA.Models.Client", b =>
                {
                    b.Navigation("BonAvoirCs");

                    b.Navigation("BonLivraisons");

                    b.Navigation("Devises");

                    b.Navigation("Dgbs");

                    b.Navigation("Factures");

                    b.Navigation("FakeFactures");

                    b.Navigation("PaiementFactures");

                    b.Navigation("Paiements");

                    b.Navigation("Rdbs");
                });

            modelBuilder.Entity("STOCMA.Models.Depense", b =>
                {
                    b.Navigation("DepenseItems");
                });

            modelBuilder.Entity("STOCMA.Models.Devis", b =>
                {
                    b.Navigation("DevisItems");
                });

            modelBuilder.Entity("STOCMA.Models.Dgb", b =>
                {
                    b.Navigation("DgbItems");
                });

            modelBuilder.Entity("STOCMA.Models.DgbF", b =>
                {
                    b.Navigation("DgbFItems");
                });

            modelBuilder.Entity("STOCMA.Models.Facture", b =>
                {
                    b.Navigation("BonLivraisons");

                    b.Navigation("FactureItems");

                    b.Navigation("PaiementFactures");

                    b.Navigation("Paiements");
                });

            modelBuilder.Entity("STOCMA.Models.FactureF", b =>
                {
                    b.Navigation("BonReceptions");

                    b.Navigation("FactureFItems");

                    b.Navigation("PaiementFactureFs");

                    b.Navigation("PaiementFs");
                });

            modelBuilder.Entity("STOCMA.Models.FakeFacture", b =>
                {
                    b.Navigation("FakeFactureItems");
                });

            modelBuilder.Entity("STOCMA.Models.FakeFactureF", b =>
                {
                    b.Navigation("FakeFactureFItems");
                });

            modelBuilder.Entity("STOCMA.Models.Famille", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("STOCMA.Models.Fournisseur", b =>
                {
                    b.Navigation("BonAvoirs");

                    b.Navigation("BonCommandes");

                    b.Navigation("BonReceptions");

                    b.Navigation("DgbFs");

                    b.Navigation("FactureFs");

                    b.Navigation("FakeFactureFs");

                    b.Navigation("PaiementFactureFs");

                    b.Navigation("PaiementFs");

                    b.Navigation("RdbFs");
                });

            modelBuilder.Entity("STOCMA.Models.Inventaire", b =>
                {
                    b.Navigation("InventaireItems");
                });

            modelBuilder.Entity("STOCMA.Models.Rdb", b =>
                {
                    b.Navigation("RdbItems");
                });

            modelBuilder.Entity("STOCMA.Models.RdbF", b =>
                {
                    b.Navigation("RdbFItems");
                });

            modelBuilder.Entity("STOCMA.Models.Revendeur", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("STOCMA.Models.Site", b =>
                {
                    b.Navigation("ArticleSites");

                    b.Navigation("BonAvoirCItems");

                    b.Navigation("BonAvoirCs");

                    b.Navigation("BonAvoirItems");

                    b.Navigation("BonAvoirs");

                    b.Navigation("BonLivraisonItems");

                    b.Navigation("BonLivraisons");

                    b.Navigation("BonReceptions");

                    b.Navigation("Devises");

                    b.Navigation("Factures");

                    b.Navigation("Inventaires");

                    b.Navigation("StockMouvementFroms");

                    b.Navigation("StockMouvementTos");
                });

            modelBuilder.Entity("STOCMA.Models.StockMouvement", b =>
                {
                    b.Navigation("StockMouvementItems");
                });

            modelBuilder.Entity("STOCMA.Models.Tarif", b =>
                {
                    b.Navigation("TarifItems");
                });

            modelBuilder.Entity("STOCMA.Models.TypeDepence", b =>
                {
                    b.Navigation("Depences");
                });

            modelBuilder.Entity("STOCMA.Models.TypeDepense", b =>
                {
                    b.Navigation("DepenseItems");
                });

            modelBuilder.Entity("STOCMA.Models.TypePaiement", b =>
                {
                    b.Navigation("BonLivraisons");

                    b.Navigation("Devises");

                    b.Navigation("FactureFs");

                    b.Navigation("Factures");

                    b.Navigation("FakeFactureFs");

                    b.Navigation("FakeFactures");

                    b.Navigation("PaiementFactureFs");

                    b.Navigation("PaiementFactures");

                    b.Navigation("PaiementFs");

                    b.Navigation("Paiements");
                });
#pragma warning restore 612, 618
        }
    }
}
